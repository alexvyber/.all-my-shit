#!/usr/bin/env zsh

source ~/.functions_declare_hashes.zsh
source ~/.functions_new

# Colorful ouput
# https://stackoverflow.com/a/5947802
RED='\033[1;38m'
CLEAN='\033[1;32m'
SEP='\033[2;30m'
NC='\033[0m' # No Color

gpu() {
	repo_name=$(pwd | rev | cut -d "/" -f 1 | rev)
	git remote add origin https://github.com/alexvyber/$repo_name.git
	git branch -M main
	git push -u origin main
}

ga.cm.today() {
	since_start=$(getDaysSinceStart)
	message=$(printf "Day $(getDaysSinceStart) ($1 | $2): $3")
	local repo_shit=/home/alexs/learn/1000days
	printf $message
	# printf "\n\nCommit? y/N: "
	# read user_input
	# if [[ $(echo $user_input | tr '[:upper:]' '[:lower:]') == 'y' ]]; then
	# 	echo "Okay... Im commiting"
	# 	git --git-dir=$repo_shit/.git -C $repo_shit commit -m "$message"
	# else
	# 	echo "Nope, that's not right!"
	# 	git --git-dir=$repo_shit/.git -C $repo_shit status
	# fi
}

ga.deleted() {
	git add $(git ls-files -d)
}

:w() {
	# for loop with $* expand all input into one string
	local message=$(for words in "$*"; do echo $words; done)
	git commit -m "$message"
}

ga.sm() {
	# for loop with $* expand all input into one string
	local message=$(for words in "$*"; do echo $words; done)
	git add .
	git commit -m "$message"
}

g.diff() {
	if [ "$1" != "" ]; then
		git diff $1~ $1
	else
		git diff HEAD~ HEAD
	fi
}

g.author_contrib() {
	git log --author="$1" --pretty=tformat: --numstat $2 |
		gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s removed lines: %s total lines: %s\n", add, subs, loc }' -
}

print_all_colors() {
	for code in {000..255}; do print -P -- "$code: %F{$code}Test%f"; done
}

vs() {
	cut_tail() {
		cut -d" " -f$1-$2
	}

	echo "node $(node -v)" | sed s/"v"//
	echo "npm $(npm -v)"
	fnm --version
	echo "pnpm $(pnpm -v)"
	echo "yarn $(yarn -v) \n"

	echo "$(deno --version | cut_tail 1 2)"
	echo "bun $(bun --version)\n"

	# echo "$(elixir -v | sed -n 3p | cut_tail 1 2)" | xargs -I {} node -e "console.log('{}'.toLowerCase())"
	# python --version

	go version | sed s/"version "// | sed s/"go1"/"1"/ | cut_tail 1 2
	rustc --version | cut_tail 1 2
	cargo --version | cut_tail 1 2
	# echo "$(lua -v | cut_tail 1 3)" | xargs -I {} node -e "console.log('{}'.toLowerCase())"

	echo ""
	docker -v | sed s/" version"// | cut_tail 1 2 | sed s/","// | xargs -I {} node -e "console.log('{}'.toLowerCase())"
	# echo "podman $(podman version | sed -n 2p)" | sed s/" Version:     "//
}

quick_change() {
	echo "Do you want to change?"
	grep -rl "$2" $1
	grep -rl "$2" $1 | xargs sed -i "s/$2/$3/g"
}

mkd() {
	str=$(echo $@ | tr -s " " "-")
	mkdir "$str"
	cd "$str" || exit
}

tmpd() {
	local dir
	if [ $# -eq 0 ]; then
		dir=$(mktemp -d)
	else
		dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
	fi
	cd "$dir" || exit
}

function forkill() {
	for n in $(pgrep $1); do sudo kill -9 $n; done
}

# cd to where is bin file located
cdbin() {
	cd $(echo "$(where $1)" | rev | cut -d'/' -f2- | rev | head -n 1)
}

g.clone_cd() {
	repo=$(echo "$1" | rev | cut -d/ -f1 | rev | cut -d. -f1)
	git clone "$1" $repo
	cd "$(pwd)/$repo"
	echo "Switched into $(pwd)/$repo"
}

g.clone_clean() {
	repo=$(echo "$1" | rev | cut -d/ -f1 | rev | cut -d. -f1)
	git clone "$1" $repo
	rip "$(pwd)/$repo/.git" # rip has to be installed!
}

# Switch files or directories content
sw() {
	tmp_name=$(TMPDIR=$(dirname -- "$1") mktemp --dry-run) &&
		mv -f -- "$1" "$tmp_name" &&
		mv -f -- "$2" "$1" &&
		mv -f -- "$tmp_name" "$2"
}

# Go to the directory of binary if possible
gowhere() {
	local location=$(which $1 | rev | cut -d"/" -f2- | rev)
	c $location || exit
	pwd
}

# Instead of wc -l
wcl() {
	cat </dev/stdin | wc -l
}

# Strapi rename `develop` to `dev`
strapi_develop_to_dev() {
	sd '"develop": "strapi develop",' '"dev": "strapi develop",' $1
}

# Clone all repos from account
clone_all_repos() {
	# NOTE: using gh, so it sholud be installed
	gh repo list $1 --limit 1000 | while read -r repo _; do
		gh repo clone "$repo" "$repo"
	done
}

# create symlink from path to the current directory
symhere() {
	str=$(echo $@)
	ln -s $str ./
}

getor() {
	local remote=$(git remote -v | head -1 | choose 1)
	git remote -v | head -1 | choose 1 | xclip -selection clipboard
	echo $remote
}

vmrss() {
	mem_size=$(cat /proc/$1/smaps | grep Rss | awk '{print $2}' | awk '{s+=$1} END {printf "%.0f\n", s}' /dev/stdin)
	echo $mem_size
	echo "$(($mem_size / 1024)) MB"
}

watch_with_zsh() {
	watch 'echo hello | zsh -c "source /path/to/functions; my_fun"'
}

jira() {
	branch=$(git branch | rg '\*' | choose 1)
	# TODO: write script
}

# converts image file given as $1 to webp
# optionally specify the quality as $2, defaults to 50/100
function image-to-webp() {
	# Works only on MacOS because of `sips`
	if [[ $(uname) != "Darwin" ]]; then
		echo "Works only on MacOS"
		return 1
	fi

	file=$1
	basename="${file%.*}"
	quality=${2:-50}

	sips -s format jpeg $file --out $basename.jpeg
	docker run --rm -v "$PWD":/here -w /here ghcr.io/toy/image_optim $basename.jpeg
	cwebp -q $quality $basename.jpeg -o $basename.webp
	rm $basename.jpeg
}
