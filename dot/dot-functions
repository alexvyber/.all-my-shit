#!/usr/bin/env bash

# Colorful ouput
# https://stackoverflow.com/a/5947802
RED='\033[1;38m'
CLEAN='\033[1;32m'
SEP='\033[2;30m'
NC='\033[0m' # No Color

#--------------------------------------------------------------------------
# Git Status All
# Globals: nothing
# Input:   nothing
# Output:  nothing
gsa() {
	local repos
	while IFS= read -r value; do
		repos+=($value)
	done < <(yq eval '.repo' "/home/alexs/.repos.yaml")

	for repo in $repos; do
		REPO=$(echo $repo | cut -c 3-)
		STR=$(
			git --git-dir=$HOME/$REPO/.git -C $HOME/$REPO status
		)
		SUB='nothing to commit, working tree clean'
		if [[ "$STR" == *"$SUB"* ]]; then
			printf "${RED}$REPO ${NC}"
			printf "${CLEAN}is clean ${NC}\n"
		else
			printf "\n${RED}$REPO ${NC}\n"
			printf "${SEP}···············································································${NC}\n"
			git --git-dir=$HOME/$REPO/.git -C $HOME/$REPO status
			echo ""
		fi
	done
} # End of function gsa

#--------------------------------------------------------------------------
# Git Push All
# Globals: nothing
# Input:   nothing
# Output:  nothing
gpa() {
	local repos
	while IFS= read -r value; do
		repos+=($value)
	done < <(yq eval '.repo' "/home/alexs/.repos.yaml")

	for repo in $repos; do
		REPO=$(echo $repo | cut -c 3-)
		STR=$(
			git --git-dir=$HOME/$REPO/.git -C $HOME/$REPO status
		)
		SUB='nothing to commit, working tree clean'
		if [[ "$STR" == *"$SUB"* ]]; then
			printf "${CLEAN}$REPO ${NC}"                                       # echo $push_result
			printf "$(git --git-dir="$HOME/$REPO/.git" -C "$HOME/$REPO" push)" # 2> /dev/null )
		else
			printf "\n${RED}$REPO ${NC}\n"
			printf "${SEP}···············································································${NC}\n"
			git --git-dir=$HOME/$REPO/.git -C $HOME/$REPO status
			echo ""
		fi
	done
} # End of function gpa

#--------------------------------------------------------------------------
# Get days since start of 1000 Days Of Code challenge
# Globals: nothing
# Input:   nothing
# Output:  day -> string@integer
getDaysSinceStart() {
	local seconds_since_start=$(($(date +'%s') - $(date --date='2022-05-31 00:00:01' +'%s')))
	local days_since_start=$(($seconds_since_start / 60 / 60 / 24))
	echo $days_since_start
	return 0
}

#--------------------------------------------------------------------------
# Today Progress Function
# Globals: nothing
# Input:
# - $1 topic
# - $2 time spent
# Output:  nothing
today() {
	since_start=$(getDaysSinceStart)
	local name_today=$(echo "[$(date +'%d.%m.%Y')]")
	local today_path="/home/alexs/learn/1000days/0_100/$since_start${name_today}.md"
	[[ ! -f $today_path ]] && printf "## Day $days_since_start ($1 | $2) \n\n\n" >$today_path
	nvim +3 $today_path
} # End of function today

#--------------------------------------------------------------------------
# Today Folder Progress Function
# Globals: nothing
# Input:
# - $1 topic
# - $2 time spent
# Output:  nothing
today.folder() {
	since_start=$(getDaysSinceStart)
	local name_today=$(echo "[$(date +'%d.%m.%Y')]")
	local today_path="/home/alexs/learn/1000days/0_100/$since_start${name_today}"
	[[ ! -d $today_path ]] && mkdir $today_path || echo "$(echo $today_path | cut -d'/' -f7-) folder exists"
	[[ ! -f "$today_path/README.md" ]] && printf "## Day $days_since_start ($1 | $2) \n\n\n" >"$today_path/README.md"
	nvim +3 "$today_path/README.md"

} # End of today folder
#--------------------------------------------------------------------------
# Generate Commit for todays learning progress
# Globals: nothing
# Input:
# - $1 topic
# - $2 time spent
# - $3 TIL...
# Output:  nothing
ga.cm.today() {
	since_start=$(getDaysSinceStart)
	message=$(printf "Day $(getDaysSinceStart) ($1 | $2): $3")
	local repo_shit=/home/alexs/learn/1000days
	printf $message
	printf "\n\nCommit? y/N: "
	read user_input
	if [[ $(echo $user_input | tr '[:upper:]' '[:lower:]') == 'y' ]]; then
		echo "Okay... Im commiting"
		git --git-dir=$repo_shit/.git -C $repo_shit commit -m "$message"
	else
		echo "Nope, that's not right!"
		git --git-dir=$repo_shit/.git -C $repo_shit status
	fi
}

# I'm going to try and keep these available to use in either bash or zsh
# If they aren't, I should make them differently

print_all_colors() {
	for code in {000..255}; do print -P -- "$code: %F{$code}Test%f"; done
}

diff_commit() {
	if [ "$1" != "" ]; then
		git diff $1~ $1
	else
		git diff HEAD~ HEAD
	fi
}

author_contrib() {
	git log --author="$1" --pretty=tformat: --numstat $2 |
		gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s removed lines: %s total lines: %s\n", add, subs, loc }' -
}

quick_change() {
	echo "Do you want to change?"
	grep -rl "$2" $1
	grep -rl "$2" $1 | xargs sed -i "s/$2/$3/g"
}

# function cd {
# 	builtin cd $1
# 	script_name="$XDG_CONFIG_HOME/cd_scripts/$(pwd | xargs basename)"
# 	if [ -e ${script_name}.zsh ]; then
# 		source ${script_name}.zsh
# 	fi
# }

# TODO: Make this function take string to remove as a parameter
pdfShit() {
	SHIT="www.it-ebooks.info"
	for i in "$@"; do
		echo $i
		pdftk "$i" output uncompressed.pdf uncompress
		sed -e "s/$SHIT//g" <uncompressed.pdf >modified.pdf
		pdftk modified.pdf output "$i" compress
		rm modified.pdf
		rm uncompressed.pdf
	done
}

pdfShitMore() {
	SHIT="www.getwsodo.com"
	for i in "$@"; do
		echo $i

		name=${i::-4}

		echo "$name"

		pdftk "$i" cat 4-end output shit.pdf
		mv shit.pdf "${name}.pdf"

		# rm shit.pdf
	done
}

#--------------------------------------------------------------------------
# !!! ZSH specific !!!
# Declare hashes for zsh
# Globals: nothing
# Input:   nothing
# Output:  nothing
declareHashes() {

    typeset -r -A paths=(

    # FILER
    f "/mnt/FILER"
    js "/mnt/FILER/js"
    ts "/mnt/FILER/ts"
    react "/mnt/FILER/react"
    node "/mnt/FILER/node"

    # SHITTER
    s "/mnt/SHITTER"
    books "/mnt/SHITTER/books"

    # TORRENTER
    t "/mnt/TORRENTER"
    trash "/mnt/TORRENTER/trash"

    # HOME
    days "$HOME/learn/1000days"
    learn "$HOME/learn"
    local "$HOME/.local"
    config "$HOME/.config"
    nvim "$HOME/.config/nvim"
    awesome "$HOME/.config/awesome"
    bookmarks "$HOME/stuff/bookmarks"
    work "$HOME/work"
    tmp "$HOME/tmp"
    dotfiles "$HOME/dotfiles"
    code "$HOME/learn/code"
    front "$HOME/personal/vyber/front"
    vyber "$HOME/personal/vyber"
    repos "$HOME/repos"
    personal "$HOME/personal" )

    for k in "${(@k)paths}" ; do hash -d $k=$paths[$k] ; done
} # End of function Declare hashes for zsh
# --------------------------------------------------------------------------

mkd() {
	mkdir "$1"
	cd "$1" || exit
}

tmpd() {
	local dir
	if [ $# -eq 0 ]; then
		dir=$(mktemp -d)
	else
		dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
	fi
	cd "$dir" || exit
}

change_nvim() {
	rm ~/.config/nvim &
	2 >dev/null
	ln -sf ~/personal/nvim/$1 ~/.config/nvim

}

change_awesome_theme() {
	ln -sf ~/.config/awesome/$1.lua ~/.config/awesome/theme.lua
}

switch_theme() {
	if [ $1 == "dark" ]; then
		change_awesome_theme dark
		switch-kitty-theme Vyber_dark
	else
		echo "asdf"
	fi
}

stupid_boxing() {
	local title="·  $@  ·"
	local edge=$(echo $title | sed 's/./·/g')

	echo "$edge"
	echo "$title"
	echo "$edge"
}
