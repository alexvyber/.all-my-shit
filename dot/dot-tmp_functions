#!/usr/bin/env bash

REPOS=("dotfiles" \
       # ".config/awesome" \
       ".config/nvim" \
       # "personal/re" \
       # "personal/todo" \
       "personal/personal" \
       "personal/vyber/front" \
       "personal/vyber/api" \
       # "personal/rat" \
)
RED='\033[1;38m'
CLEAN='\033[1;32m'
SEP='\033[2;30m'
SEPAR="···············································································"
SEPAR_LIGHT="················································································"
NC='\033[0m' # No Color


# for n in "${repos[@]}" ; do
#     # echo $n
#     new_n=$(echo $n | cut -c 2-)
#     echo $new_n ; done

gsa () {

    if [[ $repos ]] ; then
        # some
    else
   while IFS= read -r value; do
     repos+=($value)
   done < <(yq eval  '.repo' "/home/alexs/.repos.yaml")
    fi

  for repo in $repos
    do
        # echo $repo
        REPO=$(echo $repo | cut -c 3-)
        # echo $REPO
        # echo "SHIT"
      # Colorful ouput
      # https://stackoverflow.com/a/5947802
      STR=$(git --git-dir=$HOME/$REPO/.git -C $HOME/$REPO status ; echo "")
      SUB='nothing to commit, working tree clean'
      if [[ "$STR" == *"$SUB"* ]]; then
        printf "${RED}$REPO ${NC}"
        printf "${CLEAN}is clean ${NC}\n"
        # echo " "
        # printf "\n${SEP}$SEPAR_LIGHT  ${NC}\n"
      else
        printf "\n${RED}$REPO ${NC}\n"
        printf "${SEP}$SEPAR  ${NC}\n"
        git --git-dir=$HOME/$REPO/.git -C $HOME/$REPO status ; echo ""
      fi
    done
    # unset $repos
  }


# I'm going to try and keep these available to use in either bash or zsh
# If they aren't, I should make them differently

print_all_the_colors() {
    for code in {000..255}; do print -P -- "$code: %F{$code}Test%f"; done
}

diff_commit() {
    if [ "$1" != "" ]
    then
        git diff $1~ $1
    else
        git diff HEAD~ HEAD
    fi
}

author_contrib() {
    git log --author="$1" --pretty=tformat: --numstat $2 | \
        gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s removed lines: %s total lines: %s\n", add, subs, loc }' -
}

quick_change () {
    echo "Do you want to change?"
    grep -rl "$2" $1
    grep -rl "$2" $1 | xargs sed -i "s/$2/$3/g"
}

function cd {
  builtin cd $1

  script_name="$XDG_CONFIG_HOME/cd_scripts/`pwd | xargs basename`"
  if [ -e ${script_name}.zsh ]; then
    source ${script_name}.zsh
  fi
}

generate_attrs () {
  python web/manage.py generate_attr_constructors -f $1
}

nvim_custom_config () {
  nvim -u ~/git/config_manager/test/demo_init.vim $1
}

demogif () {
  local width="${3:=132}"
  local height="${4:=24}"

  # Set terminal size
  printf '\033[8;'$height';'$width't'

  termtosvg -g "$width"x"$height" $2 -c "nvim -u ~/git/config_manager/test/demo_init.vim $1"
}

nvimgif () {
  local width="${3:=132}"
  local height="${4:=24}"

  # Set terminal size
  printf '\033[8;'$height';'$width't'

  termtosvg -g "$width"x"$height" $2 -c "nvim $1"
}

export DEFAULT_VIDEO="/dev/video0"
list_vid_option () {
  v4l2-ctl --list-ctrls -d $DEFAULT_VIDEO
}

set_vid_option () {
  v4l2-ctl -d $DEFAULT_VIDEO --set-ctrl $1=$2
}



pdfShit () {
 SHIT="www.it-ebooks.info"
for i in "$@"
do
 echo $i
 pdftk "$i" output uncompressed.pdf uncompress
 sed -e "s/$SHIT//g" <uncompressed.pdf >modified.pdf
 pdftk modified.pdf output "$i" compress
 rm modified.pdf
 rm uncompressed.pdf
done
}

pdfShitMore () {
 SHIT="www.getwsodo.com"
for i in "$@"
do
 echo $i


 name=${i: : -4}

 echo "$name"

 pdftk "$i" cat 4-end output shit.pdf
 mv shit.pdf "${name}.pdf"



 # rm shit.pdf
done
}
