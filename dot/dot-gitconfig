[user]
	name = Alexey Sokolov
	email = alexvyber@gmail.com
[core]
	editor=nvim
	pager = git-split-diffs --color | less -RFX
	excludesfile = /home/alexs/.gitignore
[alias]
	co = checkout
	cm = commit -m
	s = status
	story = log --oneline
	cge = config --global -e
	h = help
	b = branch
  # see `git help log` for detailed help.
  #   %h: abbreviated commit hash
  #   %d: ref names, like the --decorate option of git-log(1)
  #   %cn: commiter name
  #   %ce: committer email
  #   %cr: committer date, relative
  #   %ci: committer date, ISO 8601-like format
  #   %an: author name
  #   %ae: author email
  #   %ar: author date, relative
  #   %ai: author date, ISO 8601-like format
  #   %s: subject
  # my awesome git log replacement
  lol  = log --graph --pretty=format:\"%C(auto)%h %C(blue)(%cr) %C(auto)%s  %d\"
  lor  = log --reverse --pretty=format:\"%C(auto)%h %C(blue)(%cr) %C(auto)%s  %d\"
  l3  = log --graph -30 --pretty=format:\"%C(auto)%h %C(blue)(%cr) %C(auto)%s  %d\"
  l4  = log --graph -40 --pretty=format:\"%C(auto)%h %C(blue)(%cr) %C(auto)%s  %d\"
  l5  = log --graph -50 --pretty=format:\"%C(auto)%h %C(blue)(%cr) %C(auto)%s  %d\"
  l6  = log --graph -60 --pretty=format:\"%C(auto)%h %C(blue)(%cr) %C(auto)%s  %d\"
  # same as above, but ISO date
  lold = log --graph --pretty=format:\"%C(auto)%h %C(blue)(%ci) %C(auto)%s  %d\"
  # using build-in standards
  lol2 = log --oneline --graph --decorate
  # shows branches and their last commits
  lol3 = log --all --graph --decorate --oneline --simplify-by-decoration
  # a = "!git status --short | peco | awk '{print $2}' | xargs git add"
  d = diff
  co = checkout
  ci = commit
  ca = commit -a
  ps = "!git push origin $(git rev-parse --abbrev-ref HEAD)"
  pl = "!git pull origin $(git rev-parse --abbrev-ref HEAD)"
  st = status
  br = branch
  ba = branch -a
  bm = branch --merged
  bn = branch --no-merged
  df = "!git hist | peco | awk '{print $2}' | xargs -I {} git diff {}^ {}"
  hist = log --pretty=format:\"%Cgreen%h %Creset%cd %Cblue[%cn] %Creset%s%C(yellow)%d%C(reset)\" --graph --date=relative --decorate --all
  llog = log --graph --name-status --pretty=format:\"%C(red)%h %C(reset)(%cd) %C(green)%an %Creset%s %C(yellow)%d%Creset\" --date=relative
  open = "!hub browse"
  type = cat-file -t
  dump = cat-file -p
  find = "!f() { git log --pretty=format:\"%h %cd [%cn] %s%d\" --date=relative -S'pretty' -S\"$@\" | peco | awk '{print $1}' | xargs -I {} git diff {}^ {}; }; f"
  # edit conflicted file on merge
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # add conflicted file on merge
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

[credential "https://github.com"]
	helper =
[credential "https://gist.github.com"]
	helper =
[init]
	defaultBranch = main
[credential]
	helper = store
[split-diffs]
	theme-name = github-light
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
